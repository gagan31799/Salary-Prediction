# -*- coding: utf-8 -*-
"""Predicting Salary Based on Experience using Linear regression and Model evaluation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TdTknDZvKfKq630tVNV4HPfi6wr1R-Xx

### Problem Statement

While working in a job environment, the monetary gained value is 'Salary' which is different for every person based on various parameters. 

Build a model that is capable of predicting the salary of a person based on his/her **years of experience** using simple linear regression. Also, evaluate the accuracy of your model by performing residual analysis.

---

### List of Activities

**Activity 1:** Analysing the Dataset

  
**Activity 2:**  Train-Test Split

**Activity 3:**  Model Training

**Activity 4:** Model Prediction 

**Activity 5:** Residual Analysis

---

#### Activity 1:  Analysing the Dataset

- Create a Pandas DataFrame for **Salary** dataset using the below link. This dataset consists of following columns:

|Field|Description|
|---:|:---|
|YearsExperience|Years of experience of a person|
|Salary|Salary of a person|

  **Source:** https://www.kaggle.com/karthickveerakumar/salary-data-simple-linear-regression

  **Dataset Link:** https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/salary.csv
  
- Print the first five rows of the dataset. Check for null values and treat them accordingly.

- Create a regression plot with `YearsExperience` on X-axis and `Salary` on Y-axis to identify the relationship between these two attributes.
"""

# Import modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


import warnings
warnings.filterwarnings('ignore')

# Loading the dataset.
csv_file = 'https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/salary.csv'
df = pd.read_csv(csv_file)

df.head()

# Check if there are any null values. If any column has null values, treat them accordingly
df.isna().sum()

# Create a regression plot between 'YearsExperience' and 'Salary'

plt.figure(figsize = (12, 4), dpi = 105)
sns.regplot(df['YearsExperience'], df['Salary'])
plt.title("Regression plot", fontsize = 16)
plt.xlabel("Years of Experience")
plt.ylabel("Salary")
plt.show()

"""---"""

# Split the DataFrame into the training and test sets.

from sklearn.model_selection import train_test_split

X = df['YearsExperience'] 
y = df['Salary'] 

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 24)

"""---"""

# Print the shape or dimensions of these reshaped arrays

X_train_reshaped = X_train.values.reshape(-1, 1)
y_train_reshaped = y_train.values.reshape(-1, 1)
X_test_reshaped = X_test.values.reshape(-1, 1)
y_test_reshaped = y_test.values.reshape(-1, 1)

print("shape of X_train",X_train_reshaped.shape)
print("shape of y_train",y_train_reshaped.shape)
print("shape of X_test",X_test_reshaped.shape)
print("shape of y_train",y_test_reshaped.shape)

# 2. Deploy linear regression model using the 'sklearn.linear_model' module.
from sklearn.linear_model import LinearRegression

# Create an object of the 'LinearRegression' class.
lin_reg = LinearRegression()


# 3. Call the 'fit()' function
lin_reg.fit(X_train_reshaped, y_train_reshaped)


# Print the slope and intercept values

print("Slope: ", lin_reg.coef_)
print("Intercept :", lin_reg.intercept_)

"""---

#### Activity 4: Model Prediction 

Predict the values for the training and test set by calling the `predict()` function on the LinearRegression object.

Suppose you got a candidate having 15 years of experience. Calculate the best salary you should offer to him according to this prediction model.

**Note:** We know that `sklearn.linear_model` module accepts two-dimensional arrays. To predict the salary of a person with 15 years of experience, convert `15` into 2D array and then pass it to the `predict()` function as follows:

`predict([[15]])`
"""

# Predict the target variable values for the training and test set

y_train_pred = lin_reg.predict(X_train_reshaped)
y_test_pred = lin_reg.predict(X_test_reshaped)

# Predict salary of a person having 15 years of experience
lin_reg.predict([[15]])

"""**Q:** What is the best salary you can offer to the candidate having 15 years of experience?

**A:** 159790

---

#### Activity 5: Residual Analysis

Check if the error terms are normally distributed using the histogram between errors (calculated by the difference of actual and predicted values) for both training and testing data.
"""

# Create a histogram for the errors obtained in the predicted values for the train set.
errors_train=y_train_reshaped-y_train_pred

plt.figure(figsize=[12,4])
plt.hist(errors_train,bins='sturges',edgecolor='black')
plt.title('Histogram for the errors obtained in the predicted values for the train set')
plt.axvline(x=errors_train.mean(),label=f'Mean of error ={errors_train.mean():.3f}',color='red')
plt.xlabel('Train_set errors ')
plt.legend()
plt.show()

"""**Q:** What is the mean of errors for the training set?

**A:** 0


"""

# Create a histogram for the errors obtained in the predicted values for the test set.

errors_test=y_test_reshaped-y_test_pred

plt.figure(figsize=[15,5])
plt.hist(errors_test,bins='sturges',edgecolor='green')
plt.title('Histogram for the errors obtained in the predicted values for the test set')
plt.axvline(x=errors_test.mean(),label=f'Mean of error ={errors_test.mean():.3f}',color='red')
plt.xlabel('Test_set errors ')
plt.legend()
plt.show()

"""**Q:** What is the mean of errors?Is it zero?

**A:** Mean of Errors is 3519.397.It is not zero.

"""